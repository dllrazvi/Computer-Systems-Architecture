     1                                  bits 32 ;assembling for the 32 bits architecture
     2                                  global start
     3                                  
     4                                  ; we ask the assembler to give global visibility to the symbol called start 
     5                                  ;(the start label will be the entry point in the program) 
     6                                  extern exit ; we inform the assembler that the exit symbol is foreign; it exists even if we won't be defining it
     7                                  import exit msvcrt.dll  ; we specify the external library that defines the symbol
     8                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
     9                                  import printf msvcrt.dll
    10                                  ; our variables are declared here (the segment is called data) 6
    11                                  segment data use32 class=data
    12 00000000 3FDBEBFC                    M dd 11111100111010111101101100111111b ;1111 1[100 1110 1011 1101 101{1] 001}1 1111
    13                                  ;                                        BITS:             [8-26]          {5-8}
    14 00000004 <res 00000004>              MNew resd 1
    15                                  segment code use32 class=code
    16                                  start:
    17                                          ;Given the doubleword M, compute the doubleword MNew as follows:
    18                                      ;the bits 0-3 a of MNew are the same as the bits 5-8 a of M.
    19                                      ;the bits 4-7 a of MNew have the value 1
    20                                      ;the bits 27-31 a of MNew have the value 0
    21                                      ;the bits 8-26 of MNew are the same as the bits 8-26 a of M.
    22 00000000 A1[04000000]                mov eax, dword [MNew]
    23 00000005 25FFFFFF0F                  and eax, 0FFFFFFFh      ; all the bits remain the same but bits 27-31 are forced to 0 (the 0)
    24 0000000A 0DF0000000                  or eax, 000000F0h       ; all the bits remain the same but bits 4-7 forced to 1 (the f)
    25 0000000F 8B0D[00000000]              mov ecx, dword [M]
    26 00000015 C1E905                      shr ecx, 5              ; swifting to the right in M so that bits 5-8 will be bits 0-3
    27 00000018 83E10F                      and ecx, 0fh            ; keeping only the lower 4 bits
    28 0000001B 09C8                        or eax,ecx              ; combining eax with ecx, only keeping the bits 0-3 from ecx and load it into eax | 0 or 0 =1 ^ 1 or 0 = 1 ^ 1 or 1 = 1
    29 0000001D 8B0D[00000000]              mov ecx, dword [M]
    30 00000023 D1E1                        shl ecx,1               ; moving the bits one position to the left so that we work with bits 9-27
    31 00000025 81E1E0FFFF0F                and ecx, 0FFFFFE0h      ; keeping only the bits 9-27, the wanted ones
    32                                                              ;
    33 0000002B 09C8                        or eax,ecx
    34 0000002D FF15[00000000]          call [exit]
