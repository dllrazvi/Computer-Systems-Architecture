     1                                    bits 32 ;assembling for the 32 bits architecture
     2                                  global start
     3                                  
     4                                  ; we ask the assembler to give global visibility to the symbol called start 
     5                                  ;(the start label will be the entry point in the program) 
     6                                  extern exit ; we inform the assembler that the exit symbol is foreign; it exists even if we won't be defining it
     7                                  import exit msvcrt.dll  ; we specify the external library that defines the symbol
     8                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
     9                                  import printf msvcrt.dll
    10                                  ; our variables are declared here (the segment is called data) 6
    11                                  segment data use32 class=data
    12 00000000 01                          a db 1
    13 00000001 03                          b db 3
    14 00000002 02                          c db 2
    15 00000003 0600                        d dw 6
    16                                      e equ 2
    17                                      r equ 5
    18                                  ; the program code will be part of a segment called code
    19                                  segment code use32 class=code
    20                                  start:
    21                                          ;((a+b-c)*2 + d-5)*d, a,b,c byte, d word
    22 00000000 A0[00000000]            mov al,byte [a]
    23 00000005 8A1D[01000000]          mov bl, byte [b]
    24 0000000B 8A0D[02000000]          mov cl, byte [c]
    25 00000011 00D8                    add al,bl;
    26 00000013 28C8                    sub al, cl;
    27 00000015 B302                    mov bl, 2
    28 00000017 F6E3                    mul bl 
    29 00000019 668B1D[03000000]        mov bx, word [d]
    30 00000020 B105                    mov cl, 5
    31 00000022 B500                    mov ch, 0
    32 00000024 6629CB                  sub bx, cx
    33 00000027 6601D8                  add ax, bx
    34 0000002A 66F725[03000000]        mul word [d]
    35                                          
    36 00000031 FF15[00000000]          call [exit]
