     1                                  bits 32 ;assembling for the 32 bits architecture
     2                                  global start
     3                                  
     4                                  ; we ask the assembler to give global visibility to the symbol called start 
     5                                  ;(the start label will be the entry point in the program) 
     6                                  extern exit ; we inform the assembler that the exit symbol is foreign; it exists even if we won't be defining it
     7                                  import exit msvcrt.dll  ; we specify the external library that defines the symbol
     8                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
     9                                  import printf msvcrt.dll
    10                                  ; our variables are declared here (the segment is called data) 6
    11                                  segment data use32 class=data
    12 00000000 01                          a db 1
    13 00000001 0200                        b dw 2
    14 00000003 03000000                    c dd 3
    15 00000007 0400000000000000            d dq 4
    16                                  ; the program code will be part of a segment called code
    17                                  segment code use32 class=code
    18                                  start:
    19                                          ;((a + b) + (a + c) + (b + c)) - d
    20                                          ;a - byte, b - word, c - double word, d - qword - Unsigned representation
    21 00000000 A0[00000000]            mov al, byte [a]
    22 00000005 6698                    cbw
    23 00000007 6611C0                  adc ax,ax
    24 0000000A 661305[01000000]        adc ax, word [b]
    25 00000011 661305[01000000]        adc ax,word [b]; ax=(a+b)+(a+b)
    26 00000018 6699                    cwd  ; ax=eax 
    27 0000001A 8B1D[03000000]          mov ebx, dword [c]
    28 00000020 11D8                    adc eax,ebx
    29 00000022 11D8                    adc eax,ebx
    30 00000024 99                      cdq
    31 00000025 1B05[07000000]          sbb eax, dword [d]
    32 0000002B 1B15[0B000000]          sbb edx, dword [d+4]; edx:eax= ((a + b) + (a + c) + (b + c)) - d
    33                                  
    34 00000031 FF15[00000000]          call [exit]
