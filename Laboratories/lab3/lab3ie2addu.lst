     1                                  bits 32 ;assembling for the 32 bits architecture
     2                                  global start
     3                                  
     4                                  ; we ask the assembler to give global visibility to the symbol called start 
     5                                  ;(the start label will be the entry point in the program) 
     6                                  extern exit ; we inform the assembler that the exit symbol is foreign; it exists even if we won't be defining it
     7                                  import exit msvcrt.dll  ; we specify the external library that defines the symbol
     8                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
     9                                  import printf msvcrt.dll
    10                                  ; our variables are declared here (the segment is called data) 6
    11                                  segment data use32 class=data
    12 00000000 01                          a db 1
    13 00000001 0200                        b dw 2
    14 00000003 03000000                    c dd 3
    15 00000007 0400000000000000            d dq 4
    16                                  ; the program code will be part of a segment called code
    17                                  segment code use32 class=code
    18                                  start:
    19                                          ;((a + b) + (a + c) + (b + c)) - d
    20                                          ;a - byte, b - word, c - double word, d - qword - Unsigned representation
    21 00000000 A0[00000000]            mov al, byte [a]
    22 00000005 B400                    mov ah,0;
    23 00000007 6601C0                  add ax,ax
    24 0000000A 660305[01000000]        add ax, word [b]
    25 00000011 660305[01000000]        add ax,word [b]; ax=(a+b)+(a+b)
    26 00000018 66BA0000                mov dx,0; ax=dx:ax | higher part:lower part
    27 0000001C 668B0D[03000000]        mov cx, word [c] ;lower part
    28 00000023 668B1D[05000000]        mov bx, word [c+2];bx:cx=c
    29 0000002A 6601C8                  add ax,cx ; dx:ax=(dx+bx):(ax+cx)=((a + b) + (a + c) + (b + c))
    30 0000002D 6601DA                  add dx,bx
    31 00000030 6601C8                  add ax,cx ; 
    32 00000033 6601DA                  add dx,bx
    33 00000036 6652                    push dx
    34 00000038 6650                    push ax
    35 0000003A 58                      pop eax; eax=dx:ax=((a + b) + (a + c) + (b + c))
    36 0000003B BA00000000              mov edx,0; eax= edx:eax
    37 00000040 2B05[07000000]          sub eax, dword [d]
    38 00000046 2B15[0B000000]          sub edx, dword [d+4]; edx:eax= ((a + b) + (a + c) + (b + c)) - d
    39                                  
    40 0000004C FF15[00000000]          call [exit]
